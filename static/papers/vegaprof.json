{
  "title": "VegaProf: Profiling Vega Visualizations",
  "year": 2023,
  "start_page": null,
  "end_page": null,
  "volume": null,
  "issue": null,
  "editors": "",
  "publisher": "",
  "location": "",
  "pdf": "https://idl.cs.washington.edu/files/2023-VegaProf-UIST.pdf",
  "abstract": "Domain-specific languages (DSLs) for visualization aim to facilitate visualization creation by providing abstractions that offload implementation and execution details from users to the system layer. Therefore, DSLs often execute user-defined specifications by transforming them into intermediate representations (IRs) in successive lowering operations. However, DSL-specified visualizations can be difficult to profile and, hence, optimize due to the layered abstractions. To better understand visualization profiling workflows and challenges, we conduct formative interviews with visualization engineers who use Vega in production. Vega is a popular visualization DSL that transforms specifications into dataflow graphs, which are then executed to render visualization primitives. Our formative interviews reveal that current developer tools are ill-suited for visualization profiling since they are disconnected from the semantics of Vega's specification and its IRs at runtime. To address this gap, we introduce VegaProf, the first performance profiler for Vega visualizations. VegaProf instruments the Vega library by associating a declarative specification with its compilation and execution. Integrated into a Vega code playground, VegaProf coordinates visual performance inspection at three abstraction levels: function, dataflow graph, and visualization specification. We evaluate VegaProf through use cases and feedback from visualization engineers as well as original developers of the Vega library. Our results suggest that VegaProf makes visualization profiling more tractable and actionable by enabling users to interactively probe time performance across layered abstractions of Vega. Furthermore, we distill recommendations from our findings and advocate for co-designing visualization DSLs together with their introspection tools.",
  "thumbnail": "images/thumbs/vegaprof.png",
  "figure": "images/figures/vegaprof.png",
  "caption": "VegaProf records low-level execution times and encodes them in coordinated visualizations corresponding to different abstraction levels of Vega’s DSL execution. (1) An icicle graph provides an overview of where most time is spent. (2) Unlike previous debugging approaches, which relied on trial-and-error-based changes of the visualization specification, VegaProf maps performance measures directly to the Vega specification. (3) To help analyze performance on different levels, VegaProf augments the dataflow graph with performance measures.",
  "web_name": "vegaprof",
  "visible": true,
  "mod_date": "2023-10-22",
  "note": null,
  "pub_date": "2023-10-22",
  "venue": "UIST",
  "authors": [
    {
      "first_name": "Junran",
      "last_name": "Yang"
    },
    {
      "first_name": "Alex",
      "last_name": "Bäuerle"
    },
    {
      "first_name": "Dominik",
      "last_name": "Moritz",
      "url": "http://domoritz.de/"
    },
    {
      "first_name": "Çağatay",
      "last_name": "Demiralp",
      "url": "https://cagataydemiralp.io/"
    }
  ],
  "materials": [
    {
      "name": "Video",
      "link": "https://drive.google.com/file/d/1RblCu4f-cg2AUKqVSEMm4JtHhKg4DgDM/view?usp=sharing"
    },
    {
      "name": "Software",
      "link": "https://github.com/cagataydemiralp/vegaprof"
    }
  ],
  "tags": [
    "vega"
  ],
  "doi": "https://doi.org/10.1145/3586183.3606790"
}